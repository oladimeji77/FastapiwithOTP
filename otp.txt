pip install fastapi uvicorn pyotp pydantic fastapi-mail twilio

import pyotp
import smtplib
from fastapi import FastAPI, HTTPException, Depends
from pydantic import BaseModel, EmailStr
from fastapi_mail import FastMail, MessageSchema, ConnectionConfig
from twilio.rest import Client

app = FastAPI()

# Secret key for OTP generation (should be stored securely per user)
SECRET_KEY = "MY_SECRET_KEY"  # Generate dynamically per user in production

# Email Configuration (SMTP Example)
conf = ConnectionConfig(
    MAIL_USERNAME="your_email@gmail.com",
    MAIL_PASSWORD="your_email_password",
    MAIL_FROM="your_email@gmail.com",
    MAIL_PORT=587,
    MAIL_SERVER="smtp.gmail.com",
    MAIL_TLS=True,
    MAIL_SSL=False,
    USE_CREDENTIALS=True
)

# Twilio SMS Configuration
TWILIO_ACCOUNT_SID = "your_twilio_sid"
TWILIO_AUTH_TOKEN = "your_twilio_auth_token"
TWILIO_PHONE_NUMBER = "+123456789"

# Pydantic Models
class OTPRequest(BaseModel):
    email: EmailStr

class OTPVerify(BaseModel):
    email: EmailStr
    otp: str

# Generate and send OTP (Email)
@app.post("/send-otp/email/")
async def send_otp_email(request: OTPRequest):
    totp = pyotp.TOTP(SECRET_KEY)
    otp_code = totp.now()
    
    message = MessageSchema(
        subject="Your OTP Code",
        recipients=[request.email],
        body=f"Your OTP code is: {otp_code}. It expires in 30 seconds.",
        subtype="plain"
    )
    
    fm = FastMail(conf)
    await fm.send_message(message)
    return {"message": "OTP sent successfully to email"}

# Generate and send OTP (SMS)
@app.post("/send-otp/sms/")
def send_otp_sms(phone_number: str):
    totp = pyotp.TOTP(SECRET_KEY)
    otp_code = totp.now()

    client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)
    message = client.messages.create(
        body=f"Your OTP code is {otp_code}. It expires in 30 seconds.",
        from_=TWILIO_PHONE_NUMBER,
        to=phone_number
    )

    return {"message": "OTP sent successfully to phone"}

# Verify OTP
@app.post("/verify-otp/")
def verify_otp(request: OTPVerify):
    totp = pyotp.TOTP(SECRET_KEY)
    if totp.verify(request.otp):
        return {"message": "OTP verified successfully"}
    raise HTTPException(status_code=400, detail="Invalid or expired OTP")



###################################################################
npm install axios

import React, { useState } from "react";
import axios from "axios";

const OTPAuth = () => {
    const [email, setEmail] = useState("");
    const [otp, setOtp] = useState("");
    const [message, setMessage] = useState("");

    const sendOTP = async () => {
        try {
            const response = await axios.post("http://localhost:8000/send-otp/email/", { email });
            setMessage(response.data.message);
        } catch (error) {
            setMessage("Error sending OTP");
        }
    };

    const verifyOTP = async () => {
        try {
            const response = await axios.post("http://localhost:8000/verify-otp/", { email, otp });
            setMessage(response.data.message);
        } catch (error) {
            setMessage("Invalid or expired OTP");
        }
    };

    return (
        <div>
            <h2>OTP Authentication</h2>
            <input type="email" placeholder="Enter your email" value={email} onChange={(e) => setEmail(e.target.value)} />
            <button onClick={sendOTP}>Send OTP</button>

            <input type="text" placeholder="Enter OTP" value={otp} onChange={(e) => setOtp(e.target.value)} />
            <button onClick={verifyOTP}>Verify OTP</button>

            {message && <p>{message}</p>}
        </div>
    );
};

export default OTPAuth;
